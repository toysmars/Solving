// acmicpc 13125
//
// max flow, min cut

#include <cstdio>
#include <climits>
#include <vector>
#include <queue>
using namespace std;

class MaxFlowEdge {
public:
    static pair<MaxFlowEdge*, MaxFlowEdge*> create_edge_and_dual(int u, int v, int capacity) {
        MaxFlowEdge* uv = new MaxFlowEdge;
        MaxFlowEdge* vu = new MaxFlowEdge;

        uv->_u = u;
        uv->_v = v;
        uv->_capacity = capacity;
        uv->_flow = 0;
        uv->_dual = vu;

        vu->_u = v;
        vu->_v = u;
        vu->_capacity = 0;
        vu->_flow = 0;
        vu->_dual = uv;

        return make_pair(uv, vu);
    }

    int u() { return _u; }
    int v() { return _v; }
    int capacity() { return _capacity; }
    int flow() { return _flow; }
    int residual() { return _capacity - _flow; }
    MaxFlowEdge* dual() { return _dual; }

    void augment(int amount) {
        _flow += amount;
        _dual->_flow -= amount;
    }

private:
    int _u;
    int _v;
    int _capacity;
    int _flow;
    MaxFlowEdge* _dual;
};

class MaxFlowNetwork {
public:
    MaxFlowNetwork(int n) : _g(n) {}

    ~MaxFlowNetwork() {
        for (auto edge_list : _g) {
            for (auto edge : edge_list) {
                delete edge;
            }
        }
    }

    vector<vector<MaxFlowEdge*>> graph() { return _g; }

    void add_edge(int u, int v, int capacity) {
        auto edges = MaxFlowEdge::create_edge_and_dual(u, v, capacity);
        auto uv = edges.first;
        auto vu = edges.second;
        _g[uv->u()].push_back(uv);
        _g[vu->u()].push_back(vu);
    }

    int maximum_flow(int s, int t) {
        int res = 0;
        int augment_volume = 0;
        while ((augment_volume = try_augment(s, t)) > 0) {
            res += augment_volume;
        }
        return res;
    }

    vector<MaxFlowEdge*> find_augment_path(int s, int t) {
        vector<MaxFlowEdge*> path;
        vector<MaxFlowEdge*> from(_g.size());
        queue<int> q;
        q.push(s);
        while (!q.empty()) {
            int u = q.front(); q.pop();
            for (auto e : _g[u]) {
                if (e->residual() > 0 && from[e->v()] == NULL) {
                    q.push(e->v());
                    from[e->v()] = e;
                }
            }
        }
        build_augment_path(path, from, s, t);
        return path;
    }

    int try_augment(int s, int t) {
        auto path = find_augment_path(s, t);
        auto volume = path_volume(path);
        for (auto e : path) e->augment(volume);
        return volume;
    }

    int path_volume(vector<MaxFlowEdge*>& path) {
        if (path.size() == 0) return 0;
        int volume = INT_MAX;
        for (auto e : path) volume = min(volume, e->residual());
        return volume;
    }

    void build_augment_path(vector<MaxFlowEdge*>& path, vector<MaxFlowEdge*>& from, int s, int v) {
        if (v != s && from[v] != NULL) {
            build_augment_path(path, from, s, from[v]->u());
            path.push_back(from[v]);
        }
    }

private:
    vector<vector<MaxFlowEdge*>> _g;
};

int main() {
    int V, E;
    scanf("%d%d", &V, &E);

    int N = 2 * V + 3;
    int start = 2 * V + 1;
    int sink = 2 * V + 2;

    MaxFlowNetwork network(N);

    for (int u = 1; u <= V; ++u) {
        network.add_edge(u, u + V, 1);
    }
    for (int ei = 0; ei < E; ++ei) {
        int u, v;
        scanf("%d%d", &u, &v);
        network.add_edge(u + V, v, 1);
        network.add_edge(v + V, u, 1);
    }

    int S, T;
    scanf("%d%d", &S, &T);
    for (int i = 0; i < S; ++i) {
        int s;
        scanf("%d", &s);
        network.add_edge(start, s, 1);
    }
    for (int i = 0; i < T; ++i) {
        int t;
        scanf("%d", &t);
        network.add_edge(t + V, sink, 1);
    }

    auto path = network.find_augment_path(start, sink);

    if (network.maximum_flow(start, sink) == 1) {
        auto g = network.graph();
        vector<int> visited(g.size());
        int step = 0;
        for (int pi = 0; pi < path.size(); ++pi) {
            int u = path[pi]->u();
            if (u > V) continue;
            if (!visited[u]) {
                step++;
                queue<int> q;
                q.push(u);
                visited[u] = step;
                while (!q.empty()) {
                    int u = q.front(); q.pop();
                    for (auto e : g[u]) {
                        if (e->residual() > 0 && visited[e->v()] == 0) {
                            q.push(e->v());
                            visited[e->v()] = step;
                        }
                    }
                }
            }
        }
        vector<int> answer;
        for (int u = 1; u <= V; ++u) {
            if (visited[u] != visited[u + V]) {
                answer.push_back(u);
            }
        }
        printf("%d\n", answer.size());
        for (int u : answer) printf("%d ", u);
        printf("\n");
    }
    else {
        printf("0\n");
    }

    return 0;
}
